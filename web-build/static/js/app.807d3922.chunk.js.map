{"version":3,"sources":["SafariSolaceStyleTools/styleconfig.ts","SafariSolaceStyleTools/themecontext.tsx","classes/app-context.tsx","entities/user.ts","classes/local-handler.ts","classes/httphandler.ts","SafariSolaceStyleTools/basicbutton.tsx","SafariSolaceStyleTools/basicmodal.tsx","SafariSolaceStyleTools/basictext.tsx","SafariSolaceStyleTools/pixel-spacer.tsx","SafariSolaceStyleTools/basicinputtext.tsx","components/add-employee.tsx","components/employee-info-and-pw-change.tsx","components/display-users.tsx","components/settingsScreen.tsx","components/homepage.tsx","components/loadingScreen.tsx","components/loginScreen.tsx","components/unAuthScreen.tsx","App.tsx","assets/Sale.png"],"names":["Theme","Color","themeContext","createContext","theme","setTheme","GetColor","colorType","returnColor","useContext","light","Text","textHeader","textTitle","Button","InputText","ModalBackground","ModalInner","primaryColor","SecondaryColor","TertiaryColor","dark","hacker","Platform","OS","shadowRadius","borderRadius","paddingRadius","margin","Status","initContext","pageIndex","setPageIndex","user","id","isManager","fname","lname","username","password","setUser","employeeList","setEmployeeList","employeeIndex","setEmployeeIndex","default","sync","setSync","appContext","LocalHandler","Context","EmployeeArray","LocalEmployeeArray","map","e","i","temp","serverData","status","unChanged","push","this","Employee","NewLocalEmployee","add","newArray","list","length","delete","passwordChange","type","HttpHandler","dev","useURL","devMode","context","localHander","a","async","axios","get","getURL","response","data","syncEmployees","filter","forEach","console","log","tempEmployee","post","currentEmployee","getServerAllEmployees","serverEmployees","BasicButton","props","onPress","title","View","style","backgroundColor","padding","color","disabled","testID","key","BasicModal","child","openTitle","useState","show","setShow","styles","StyleSheet","create","modalView","flexDirection","flex","alignContent","justifyContent","alignItems","shadowColor","shadowOffset","width","height","Modal","animationType","transparent","visible","onRequestClose","borderWidth","TextType","BasicText","text","Error","textType","textColor","textAlign","fontSize","getTextFontSize","getAlignment","tempAlign","Title","Header","General","PixelSpacer","minHeight","minWidth","maxHeight","maxWidth","BasicInputText","value","onChangeText","placeholder","undefined","keyboardType","editable","onChange","nativeEvent","eventCount","target","onContentSizeChange","contentSize","TextInput","AddEmployee","setFname","setLname","setUsername","setPassword","setIsManager","contextStates","localHandler","submit","newEmployee","createEmployee","alert","Dimensions","t","Switch","onValueChange","v","EmployeeInfo","employee","pwUpdateState","setpwUpdate","pwState","setpw","localhandler","alignSelf","pwStateClone","trim","includes","match","changePassword","savepwToContext","UserDisplay","ScrollView","localEmployeeArray","getLocalEmployees","createDisplay","SettingsPage","prop","instance","useMsal","enableAccountStorageEvents","addEventCallback","message","eventType","EventType","LOGOUT_FAILURE","setPage","logout","HomePage","httpHandler","useEffect","updateDisplay","syncApp","LoadingScreen","ActivityIndicator","size","container","LoginScreen","LOGIN_FAILURE","loginPopup","err","login","UnAuthScreen","page","SwitchAuth","client","PublicClientApplication","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","App","pageIndx","themeContextObject","Provider","Image","source","require","switchDisplay","module","exports"],"mappings":"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","file":"static/js/app.807d3922.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\nimport { Platform } from \"react-native\";\r\nimport { themeContext } from \"./themecontext\";\r\n\r\nexport enum Theme{\r\n    default,\r\n    light,\r\n    dark,\r\n    hacker\r\n}\r\n\r\nexport enum Color{\r\n    Text,\r\n    textHeader,\r\n    textTitle,\r\n    Button,\r\n    ModalBackground,\r\n    ModalInner,\r\n    InputText,\r\n    primaryColor,\r\n    SecondaryColor,\r\n    TertiaryColor,\r\n}\r\n\r\nexport default function GetColor(colorType:Color){\r\n    const context = useContext(themeContext);\r\n    let returnColor = '#ffffff'\r\n\r\n    switch(context.theme){\r\n        case Theme.light:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = '#E6B566' ; break}\r\n                case Color.textHeader: { returnColor = '#E6B566' ; break}\r\n                case Color.textTitle: { returnColor = '#E6B566' ; break}\r\n                case Color.Button: { returnColor = '#E5707E' ; break}\r\n                case Color.InputText: { returnColor ='#E5707E'; break}\r\n                case Color.ModalBackground: { returnColor = '#A3DDCB'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor = '#A3DDCB' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#E8E9A1'; break}\r\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n        case Theme.dark:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = '#2D4263' ; break}\r\n                case Color.textHeader: { returnColor = '#2D4263' ; break}\r\n                case Color.textTitle: { returnColor = '#2D4263' ; break}\r\n                case Color.Button: { returnColor = '#C84B31' ; break}\r\n                case Color.InputText: { returnColor ='#C84B31'; break}\r\n                case Color.ModalBackground: { returnColor = '#191919'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor = '#191919' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#191919' ; break}\r\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n        case Theme.hacker:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = '#14f074' ; break}\r\n                case Color.textHeader: { returnColor = '#14f074'  ; break}\r\n                case Color.textTitle: { returnColor = '#14f074'  ; break}\r\n                case Color.Button: { returnColor = '#0c833d' ; break}\r\n                case Color.InputText: { returnColor ='#0c833d'; break}\r\n                case Color.ModalBackground: { returnColor = '#0c833d'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor ='#063335' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#063335' ; break}\r\n                case Color.TertiaryColor: { returnColor = '#13993b' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n        default:{\r\n            switch(colorType){\r\n                case Color.Text: { returnColor = 'ivory' ; break}\r\n                case Color.textHeader: { returnColor = 'ivory' ; break}\r\n                case Color.textTitle: { returnColor = 'ivory' ; break}\r\n                case Color.Button: { returnColor = 'chocolate' ; break}\r\n                case Color.InputText: { returnColor ='linen'; break}\r\n                case Color.ModalBackground: { returnColor = '#96D65E'}\r\n                case Color.ModalInner: { returnColor = '#ffffff'}\r\n                case Color.primaryColor: { returnColor = '#333' ; break}\r\n                case Color.SecondaryColor: { returnColor = '#5B995A' ; break}\r\n                case Color.TertiaryColor: { returnColor = '#12FF5A' ; break}\r\n                default:      { returnColor = '#ffffff' ; break}\r\n            };break\r\n        }\r\n    }\r\n    if(Platform.OS == \"android\"){ return `${returnColor }`}\r\n    else return returnColor \r\n\r\n}\r\n\r\n\r\nexport function shadowRadius(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 5}\r\n        case Theme.dark:    {return 5}\r\n        case Theme.hacker:  {return 1}\r\n        default:            {return 5}\r\n    }\r\n\r\n}\r\n\r\nexport function borderRadius(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 10}\r\n        case Theme.dark:    {return 10}\r\n        case Theme.hacker:  {return 0}\r\n        default:            {return 10}\r\n    }\r\n\r\n}\r\n\r\nexport function paddingRadius(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 5}\r\n        case Theme.dark:    {return 5}\r\n        case Theme.hacker:  {return 0}\r\n        default:            {return 5}\r\n    }\r\n}\r\n\r\nexport function margin(){\r\n    const context = useContext(themeContext);\r\n    switch(context.theme){\r\n        case Theme.light:   {return 5}\r\n        case Theme.dark:    {return 5}\r\n        case Theme.hacker:  {return 2}\r\n        default:            {return 5}\r\n    }\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport { Theme } from \"./styleconfig\";\r\n\r\n\r\n\r\n\r\n/**this interface is used for intellisense for the 'Theme' useContext*/\r\nexport interface ThemeContextInterface{\r\n    theme:Theme\r\n    setTheme:Function\r\n}\r\n\r\nexport const themeContextObject:ThemeContextInterface = {theme:0, setTheme:()=>{}}\r\n\r\n/**This is the global 'Theme' context*/\r\nexport const themeContext = createContext(themeContextObject)","import { createContext, useContext } from \"react\";\r\nimport LocalEmployee, { Employee } from \"../entities/user\";\r\nimport { Theme } from \"../SafariSolaceStyleTools/styleconfig\";\r\n\r\n\r\n\r\nexport interface AppContextInterface{\r\n    pageIndex:number\r\n    setPageIndex:Function\r\n    user:Employee,\r\n    setUser:React.Dispatch<React.SetStateAction<Employee>>,\r\n    employeeList:LocalEmployee[],\r\n    setEmployeeList:React.Dispatch<React.SetStateAction<LocalEmployee[]>>,\r\n    employeeIndex:number, \r\n    setEmployeeIndex:React.Dispatch<React.SetStateAction<number>>,\r\n    theme:Theme, \r\n    setTheme:React.Dispatch<React.SetStateAction<Theme>>,\r\n    sync:boolean, \r\n    setSync:React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\n\r\nexport const initContext:AppContextInterface = {\r\n    pageIndex:0,\r\n    setPageIndex:()=>{},\r\n    user:{\r\n        id: 0,\r\n        isManager: false,\r\n        fname: '',\r\n        lname: '',\r\n        username: '',\r\n        password: '',\r\n    },\r\n    setUser:()=>{},\r\n    employeeList:[], \r\n    setEmployeeList:()=>{},\r\n    employeeIndex:0 , \r\n    setEmployeeIndex:()=>{},\r\n    theme:Theme.default, \r\n    setTheme:()=>{},\r\n    sync:true, \r\n    setSync:()=>{}\r\n}\r\nexport const appContext = createContext(initContext)","export interface Employee{\r\n    id: number\r\n    isManager: boolean\r\n    fname: string\r\n    lname: string\r\n    username: string\r\n    password: string\r\n}\r\n\r\nexport interface WorkLog{\r\n    wId: number\r\n    type: \"CHEKIN\" | \"CHECKOUT\" \r\n    timestamp: number\r\n}\r\n\r\nexport enum Status{\r\n    unChanged,\r\n    add,\r\n    changed,\r\n    delete\r\n}\r\nexport default interface LocalEmployee{\r\n    serverData:Employee\r\n    status:Status\r\n}\r\n\r\n\r\n","\r\nimport { useContext } from \"react\";\r\nimport LocalEmployee, {Employee, Status} from \"../entities/user\";\r\nimport { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport { Theme } from \"../SafariSolaceStyleTools/colorstyle\";\r\nimport { appContext } from \"./app-context\";\r\n\r\n\r\n\r\nexport default class LocalHandler implements localInterface {\r\n    private Context = useContext(appContext);\r\n\r\n    syncEmployees(EmployeeArray: Employee[]) {\r\n        //temp array to hold the changes\r\n        let LocalEmployeeArray:LocalEmployee[]=[];\r\n\r\n        // Map the input array to a new Local User\r\n        EmployeeArray.map((e,i) =>{\r\n            // create the new types\r\n            let temp:LocalEmployee = {serverData: e,status: Status.unChanged};\r\n            // add temp user to the new list\r\n            LocalEmployeeArray.push( temp );\r\n        })\r\n        //set the state\r\n        this.Context.setEmployeeList(LocalEmployeeArray);\r\n        //marked the app as async-ed with the server\r\n        this.Context.setSync(true);\r\n    }\r\n    getLocalEmployees(): LocalEmployee[] {\r\n        //return all users from the state\r\n        return this.Context.employeeList;\r\n    }\r\n    createEmployee(Employee: Employee) {\r\n        //mark the app as not synced with the server\r\n        this.Context.setSync(false);\r\n        // make a temp Local Employee\r\n        const NewLocalEmployee:LocalEmployee = { serverData: Employee,status: Status.add};\r\n        //Using the spread operator to create a new object array and append the new user\r\n        const newArray = this.Context.employeeList;\r\n        newArray.push(NewLocalEmployee);\r\n        this.Context.setEmployeeList(newArray);\r\n    }\r\n    deleteEmployee(Employee: Employee) {\r\n        //mark the app as not synced with the server\r\n        this.Context.setSync(false);\r\n        //get the current list of Local users\r\n        let list = this.Context.employeeList\r\n        //search for this employee\r\n        for(let i =0; i < list.length;i++){\r\n            if(list[i].serverData.id == Employee.id){\r\n                //mark as deleted if found and return\r\n                list[i].status = Status.delete\r\n                // make a new array so the state will update\r\n                this.Context.setEmployeeList([...list ]);\r\n                return;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    changePassword(Employee: Employee, passwordChange: string) {\r\n        //mark the app as not synced with the server\r\n        this.Context.setSync(false);\r\n        //get the current list of Local users\r\n        let list = this.Context.employeeList\r\n        for(let i =0; i < list.length;i++){\r\n            if(list[i].serverData.id == Employee.id){\r\n                //change the password\r\n                list[i].serverData.password= passwordChange\r\n                // make a new array so the state will update\r\n                this.Context.setEmployeeList([...list ]);\r\n                return;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    changeTheme(type: Theme) {\r\n        this.Context.theme = type\r\n    }\r\n\r\n\r\n    \r\n    \r\n}","import axios from \"axios\"\r\nimport { useContext } from \"react\";\r\nimport LocalEmployee, {Employee, Status} from \"../entities/user\";\r\nimport EmployeeInterface, { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport { appContext } from \"./app-context\";\r\nimport LocalHandler from \"./local-handler\";\r\n\r\n\r\n\r\nexport default class HttpHandler implements EmployeeInterface{\r\n    private useURL:string = \"http://20.121.72.15:3000\";\r\n    private devMode:boolean = false;\r\n    /////////////////////////////////////////////\r\n    private context = useContext(appContext);\r\n    private localHander: localInterface = new LocalHandler();\r\n\r\n    constructor(dev:boolean = false){\r\n        this.devMode=dev;\r\n    }\r\n\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(this.devMode){ return `https://c27c0348-eb0c-4ac0-afe2-101bc195d6a5.mock.pstmn.io`}\r\n        else {return  this.useURL}\r\n    }\r\n\r\n    async getServerAllEmployees(): Promise<Employee[]> {\r\n        const response = await axios.get(`${this.getURL()}/employees`);\r\n        const data: Employee[] = response.data;\r\n        this.localHander.syncEmployees(data);\r\n        return data;\r\n    }\r\n\r\n    async syncApp() {\r\n        const usersToSave: LocalEmployee[] = this.context.employeeList.filter(e => e.status === Status.add);\r\n        usersToSave.forEach(async e => {\r\n            console.log(e.serverData);\r\n            console.log(\"Making post call for:\", e.serverData)\r\n            const tempEmployee = {\r\n                isManager: e.serverData.isManager,\r\n                fname: e.serverData.fname,\r\n                lname: e.serverData.lname,\r\n                username: e.serverData.username,\r\n                password: e.serverData.password\r\n            };\r\n            const response = await axios.post(`${this.getURL()}/employees`, tempEmployee);\r\n            const currentEmployee: Employee = response.data; \r\n            return(currentEmployee);\r\n        });\r\n        const serverEmployees = await this.getServerAllEmployees();\r\n        this.localHander.syncEmployees(serverEmployees);\r\n        this.context.setSync(true);\r\n    }\r\n}","import React from \"react\";\r\nimport { Button, NativeSyntheticEvent, NativeTouchEvent, Platform, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius, shadowRadius } from \"./styleconfig\";\r\nimport PixelSpacer from \"./pixel-spacer\";\r\nimport { platform } from \"os\";\r\n\r\n\r\nexport default function BasicButton(props){\r\n    const {onPress, title} = props;\r\n    function getViewStyle(){\r\n        if(Platform.OS == \"web\") { return {margin:margin(), backgroundColor:GetColor(Color.Button), padding: paddingRadius(), borderRadius:borderRadius(),shadowRadius:shadowRadius()}}\r\n        else{return {margin:margin(), padding: paddingRadius(), borderRadius:borderRadius(),shadowRadius:shadowRadius()}}\r\n    }\r\n    \r\n\r\n    return(\r\n    <View style={getViewStyle()}>\r\n        <Button onPress={props.onPress} title={ props.title} color={GetColor(Color.Button)} \r\n        disabled = { props.disabled} key={ props.key} testID={props.testID}/> \r\n    </View>)\r\n}","import React, { useState } from \"react\";\r\nimport { Modal, View,StyleSheet, Button } from \"react-native\";\r\nimport BasicButton from \"./basicbutton\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"./styleconfig\";\r\nimport FlexSpacer from \"./flex-spacer\";\r\nimport PixelSpacer from \"./pixel-spacer\";\r\n\r\n\r\n\r\nexport default function BasicModal(props){\r\n  let child = props.child\r\n  const openTitle = props?.openTitle ?? \"null open title\"\r\n  \r\n\r\n  const [show, setShow] = useState(false);\r\n  const styles = StyleSheet.create({\r\n    modalView: {\r\n      flexDirection:\"column\",\r\n      flex:1,\r\n      alignContent:\"center\", justifyContent:\"center\",alignItems:\"center\",\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 0\r\n      }\r\n  }\r\n});\r\n\r\n    return(\r\n      <View>\r\n        <View style={{alignItems:\"center\", justifyContent:\"center\"}}>\r\n          {/* Main Modal  */}\r\n          <Modal\r\n            animationType=\"slide\"\r\n            transparent={true}\r\n            visible={show}\r\n            onRequestClose={() => {setShow(!show)}}>\r\n            <View style={ styles.modalView}>\r\n              <View style={{ margin:margin(),padding:paddingRadius(), borderRadius:borderRadius(), backgroundColor:GetColor(Color.ModalBackground), borderWidth:5}}>\r\n                  {child}\r\n                <BasicButton title={\"close\"} onPress={()=>{setShow(!show)}}/>\r\n              </View>\r\n            </View>\r\n          </Modal>\r\n          {/* Main Modal  */}\r\n        </View>\r\n\r\n        <BasicButton title={openTitle} onPress={()=>{setShow(true)}}/>\r\n\r\n      </View>)\r\n      \r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { View,Text, Platform } from 'react-native'\r\nimport GetColor, { Color } from './styleconfig'\r\n\r\n\r\n/** the only required prop, @attribute 'text', optionally @Attribute'textType' of type 'TextType' can be included for specifying extra styling options*/\r\nexport default function BasicText(props){\r\n    const {text} = props\r\n    if(!text){throw new Error('You did not pass a text value into one of your text')}\r\n    //This will grab from the props the type of text for styling\r\n    // is not found, it will default to general text\r\n    const textType:TextType = props.textType\r\n    let textColor = Color.Text\r\n    let textAlign:string = \"auto\";\r\n    if(props?.textAlign) {textAlign =props?.textAlign  }\r\n    return (\r\n    <View style={{margin:5}}>\r\n        <Text style={{color:GetColor(textColor), fontSize:getTextFontSize(textType),textAlign:getAlignment(textAlign,textType) }}>{text}</Text>\r\n    </View>)\r\n}\r\n\r\n\r\n\r\n/**The type */\r\nexport enum TextType{\r\n    Title,\r\n    Header,\r\n    General\r\n}\r\nfunction getAlignment(textAlign:string,textType:TextType){\r\n    const tempAlign = textAlign ?? \"auto\"\r\n    switch(textType){\r\n        case TextType.Title:{return \"center\"}\r\n        case TextType.Header:{return \"center\"}\r\n        case TextType.General:{return tempAlign}\r\n        default : {return tempAlign}\r\n\r\n    }\r\n}\r\n\r\nfunction getTextFontSize(textType:TextType){\r\n    if(Platform.OS == \"web\"){\r\n        switch(textType){\r\n            case TextType.Title  :  {return 50}\r\n            case TextType.Header:  {return 30}\r\n            case TextType.General:  {return 20}\r\n            // The default case should be exactly the same as the general text as an edge case\r\n            default              :  {return 20}\r\n            }\r\n    }\r\n    else{\r\n        switch(textType){\r\n            case TextType.Title  :  {return 30}\r\n            case TextType.Header:  {return 20}\r\n            case TextType.General:  {return 10}\r\n            default              :  {return 10}\r\n        }\r\n    }\r\n}","import React from \"react\"\r\nimport { View } from \"react-native\"\r\n\r\n\r\n/**this is a component for spacing elements with absolute pixels. @attribute height, width will default to 0. others include minWidth, maxWidth, minHight, maxHight*/\r\nexport default function PixelSpacer(props){\r\n    const height = props?.height ?? 0\r\n    const width = props?.width ?? 0\r\n    const {minHeight,minWidth,maxHeight,maxWidth} = props\r\n    return(<View style={{height:height, width:width, minHeight, minWidth, maxHeight, maxWidth}}/>)\r\n}","import React from \"react\";\r\nimport { TextInput, View } from \"react-native\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius, shadowRadius } from \"./styleconfig\";\r\n\r\n\r\nexport default function BasicInputText(props){\r\n    const {value, onChangeText, placeholder} = props;\r\n    if(value === undefined){throw new Error('You did not pass a value into one of your input text, pass the useState read only value here')}\r\n    if(!onChangeText){throw new Error('You did not pass an onChangeText to one of your input text, pass the useState function here ')}\r\n    if(!placeholder){throw new Error('You did not put a placeholder into one of your input text, please add a default value that describes what the field will be used for')}\r\n    const keyboardType = props?.keyboardType ?? 'default';\r\n    const editable = props?.editable ?? true;\r\n    const onChange = props?.onChange ?? ( ({ nativeEvent: { eventCount, target, text} }) => {} ) ;\r\n    const onContentSizeChange = props?.onContentSizeChange ?? ( ({ nativeEvent: { contentSize: { width, height } } }) => {} );\r\n    const textAlign = props?.textAlign ?? 'center'\r\n\r\n    return(\r\n    <View style={{backgroundColor:GetColor(Color.InputText), borderRadius:borderRadius(), margin:margin(), padding:paddingRadius(), shadowRadius:shadowRadius()}}> \r\n        <TextInput value={value} onChangeText={onChangeText} placeholder={placeholder} \r\n        keyboardType={keyboardType} editable={editable} onChange={onChange} onContentSizeChange={onContentSizeChange}\r\n        style={{fontSize:20,textAlign:textAlign}} \r\n        />\r\n    </View>)\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport {Dimensions, Switch, View} from \"react-native\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicText, { TextType } from \"../SafariSolaceStyleTools/basictext\";\r\nimport BasicModal from \"../SafariSolaceStyleTools/basicmodal\"\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport { Employee } from \"../entities/user\";\r\nimport { appContext } from \"../classes/app-context\";\r\nimport PixelSpacer from \"../SafariSolaceStyleTools/pixel-spacer\";\r\n\r\n\r\nexport default function AddEmployee(){\r\n\r\n    const [fname, setFname] = useState(\"\");\r\n    const [lname, setLname] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isManager, setIsManager] = useState(false);\r\n\r\n    const contextStates = useContext(appContext);\r\n    const localHandler = new LocalHandler();\r\n\r\n    function submit(){\r\n        if(!fname || !lname || !username || !password){\r\n            alert(\"All fields must be filled out...\")\r\n        } else {\r\n            const newEmployee: Employee = {id: contextStates.employeeList.length, fname: fname, lname: lname, isManager: isManager, username: username, password: password};\r\n            localHandler.createEmployee(newEmployee);\r\n            alert(\"User added\");\r\n            setFname(\"\");\r\n            setLname(\"\");\r\n            setUsername(\"\");\r\n            setPassword(\"\");\r\n            console.log(contextStates.employeeList);\r\n        }\r\n    }\r\n\r\n    function addDisplay(){\r\n        return(<>\r\n        <PixelSpacer width={Dimensions.get(\"screen\").width*.2} height={1}/>\r\n        <BasicText text=\"First Name\" textType={TextType.Header}/>\r\n        <BasicInputText value={fname} onChangeText={t => setFname(t)} placeholder=\"John\"/>\r\n        <BasicText text=\"Last Name\" textType={TextType.Header}/>\r\n        <BasicInputText value={lname} onChangeText={t => setLname(t)} placeholder=\"Smith\"/>\r\n        <BasicText text=\"Username\" textType={TextType.Header}/>\r\n        <BasicInputText value={username} onChangeText={t => setUsername(t)} placeholder=\"jsmith\"/>\r\n        <BasicText text=\"Password\" textType={TextType.Header}/>\r\n        <BasicInputText value={password} onChangeText={t => setPassword(t)} placeholder=\"********\"/>\r\n        <View style={{flexDirection:\"row\", alignItems:\"center\", justifyContent:\"center\"}}>\r\n            <BasicText text=\"Is person manager?\" textType={TextType.Header}/>\r\n            <Switch onValueChange={() => setIsManager(v => !v)} value={isManager}/>\r\n        </View>\r\n        <BasicButton onPress={submit} title=\"Submit\"/>\r\n        </>)\r\n    }\r\n\r\n    return(\r\n    <BasicModal openTitle=\"Add Employee\" child={addDisplay()}/>)\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { Dimensions, View} from \"react-native\";\r\nimport { appContext } from \"../classes/app-context\";\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport { Employee } from \"../entities/user\";\r\nimport { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicModal from \"../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText, { TextType } from \"../SafariSolaceStyleTools/basictext\";\r\nimport PixelSpacer from \"../SafariSolaceStyleTools/pixel-spacer\";\r\n\r\n/** Displays the employee info and contains password change functionality\r\n *  @param employee the employee that the admin wishes to view\r\n*/\r\nexport default function EmployeeInfo(props: { employee: Employee }) {\r\n\r\n    //prop alias\r\n    const employee = props.employee\r\n\r\n    //global states\r\n    const contextStates = useContext(appContext);\r\n    \r\n    //local states\r\n    const [pwUpdateState, setpwUpdate] = useState<boolean>(false); //display new password creation\r\n    const [pwState, setpw] = useState<string>(\"\"); //textinput reference\r\n    \r\n    //local handler\r\n    const localhandler: localInterface = new LocalHandler()\r\n    \r\n    /** check that the new password is valid and if it is, update the local handler  */\r\n    function savepwToContext() {       \r\n        \r\n        //clean up the input\r\n        const pwStateClone = pwState.trim()       \r\n        \r\n        //if password already exists\r\n        if (contextStates.employeeList.map((employee)=> employee.serverData.password).includes(pwStateClone) === true){\r\n            alert(\"That password already exists, try another\")\r\n        }        \r\n        \r\n        //if password characters are valid\r\n        else if (pwStateClone.length > 7 && pwStateClone.match(/[!-/:-@[-`{-~]/) !== null){           \r\n            \r\n            //update employee prop\r\n            employee.password = pwStateClone;\r\n            \r\n            //update handler and close pw updater\r\n            localhandler.changePassword(employee, pwStateClone)\r\n            setpwUpdate(false)\r\n        }\r\n        else alert(\"You must enter a valid password between 7 and 1023783467234 characters, and include at least one symbol\")\r\n    }\r\n\r\n    //render page\r\n    function renderPage(){\r\n        return (\r\n            <View style={{alignSelf:\"stretch\"}}>\r\n                <PixelSpacer width={Dimensions.get(\"screen\").width*.2} height={1} textType={TextType.Header}/>\r\n                <BasicText text={`Name: ${employee.fname} ${employee.lname}`} textType={TextType.Header}/>\r\n                <BasicText text={ `Username: ${ employee.username }`  } textType={TextType.Header}/>\r\n                <BasicText text={ `ID: ${ employee.id }`} textType={TextType.Header}/>\r\n                <BasicText text={ `Manager: ${ employee.isManager ? 'Yes':'No' }`} textType={TextType.Header}/>\r\n                {pwUpdateState ? (\r\n                    <View>\r\n                        <BasicInputText\r\n                            value={pwState}\r\n                            onChangeText={setpw}\r\n                            placeholder=\"new password\"\r\n                        ></BasicInputText>\r\n                        <BasicButton title=\"save\" onPress={() => savepwToContext()}/>\r\n                    </View>\r\n                ) : <BasicButton title=\"Create New Password\" onPress={() => setpwUpdate(true)}/>}             \r\n            </View>)\r\n    }\r\n\r\n    //get name\r\n    function getName(){\r\n        return `${employee.fname} ${employee.lname}`\r\n    } \r\n    \r\n    //component main return\r\n    return(\r\n        <BasicModal child = {renderPage()} openTitle = {getName()} ></BasicModal>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { ScrollView, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport LocalEmployee, { Employee } from \"../entities/user\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\nimport EmployeeInfo from \"./employee-info-and-pw-change\";\r\n\r\n\r\n\r\n\r\nexport default function UserDisplay(){\r\n    //getting the local handler to display the users\r\n    const localHandler:LocalHandler = new LocalHandler()\r\n\r\n    function Testing(){ console.log(\"press\")}\r\n\r\n\r\n    function createDisplay():JSX.Element[]{\r\n        //Gets an array of local users\r\n        let localEmployeeArray: LocalEmployee[] = localHandler.getLocalEmployees()\r\n\r\n        // returns a default array if no users are found\r\n        if( !(localEmployeeArray.length >1)) {return [<BasicText text={\"No Employees found\"}/>]}\r\n        // maps each user to a component and returns the array\r\n        return localEmployeeArray.map((e,i)=>{return <EmployeeInfo key={e.serverData.id} employee={e.serverData}/>})\r\n    }\r\n\r\n\r\n    return(\r\n        <View style={{maxHeight:300}}>\r\n            <ScrollView>\r\n                {createDisplay()}\r\n            </ScrollView>\r\n        </View>)\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { Alert, Dimensions, View } from \"react-native\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText, { TextType } from \"../SafariSolaceStyleTools/basictext\";\r\nimport { EventMessage, EventType } from \"@azure/msal-browser\";\r\nimport { ThemeSelect } from \"./themeSelector\";\r\nimport PixelSpacer from \"../SafariSolaceStyleTools/pixel-spacer\";\r\nimport { themeContext } from \"../SafariSolaceStyleTools/themecontext\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius, Theme } from \"../SafariSolaceStyleTools/styleconfig\";\r\n\r\nexport default function SettingsPage(prop) {\r\n\r\n  const {instance} = useMsal();\r\n  const theme = useContext(themeContext)\r\n  instance.enableAccountStorageEvents();\r\n  instance.addEventCallback((message: EventMessage) => {\r\n    if (message.eventType === EventType.LOGOUT_FAILURE) {\r\n      prop.setPage(0);\r\n    } \r\n    });\r\n\r\n  function logout() {\r\n    instance.logout();\r\n    prop.setPage(0);\r\n  } \r\n    return (\r\n        <View>\r\n            <PixelSpacer width={Dimensions.get(\"screen\").width*.2} height={1}/>\r\n            <BasicText text={\"Settings\"} textType={TextType.Header}/>\r\n            <View style={{backgroundColor:GetColor(Color.SecondaryColor), borderRadius:borderRadius(), padding:paddingRadius(), margin:margin()}}>\r\n              <BasicButton title={'Set Default theme'} onPress={()=>{theme.setTheme(Theme.default)}}/>\r\n              <BasicButton title={'Set Dark theme'} onPress={()=>{theme.setTheme(Theme.dark)}}/>\r\n              <BasicButton title={'Set Light theme'} onPress={()=>{theme.setTheme(Theme.light)}}/>\r\n              <BasicButton title={'Set Hacker theme'} onPress={()=>{theme.setTheme(Theme.hacker)}}/>\r\n\r\n            </View>\r\n            <BasicButton onPress={() => {logout()}} title={\"Logout\"} />\r\n        </View>\r\n    )\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport { Dimensions, View } from \"react-native\";\r\nimport { appContext } from \"../classes/app-context\";\r\nimport HttpHandler from \"../classes/httphandler\";\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport HttpInterface, { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicModal from \"../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText, { TextType } from \"../SafariSolaceStyleTools/basictext\";\r\nimport PixelSpacer from \"../SafariSolaceStyleTools/pixel-spacer\";\r\nimport GetColor, { borderRadius, Color, margin, paddingRadius } from \"../SafariSolaceStyleTools/styleconfig\";\r\nimport AddEmployee from \"./add-employee\";\r\nimport UserDisplay from \"./display-users\";\r\nimport SettingsPage from \"./settingsScreen\";\r\n\r\nexport default function HomePage(){\r\n\r\n    const httpHandler: HttpInterface = new HttpHandler(false);\r\n    const localHandler: localInterface = new LocalHandler();\r\n    const context = useContext(appContext)\r\n\r\n    useEffect(()=>{\r\n        updateDisplay();\r\n    },[])\r\n\r\n    async function updateDisplay(){\r\n        const response = await httpHandler.getServerAllEmployees();\r\n        localHandler.syncEmployees(response)\r\n    }\r\n\r\n    return(<View style={{flexDirection:\"column\"}}>\r\n        <BasicModal openTitle={\"settings\"} child={<View><SettingsPage/></View>}/>\r\n        <BasicText text={\"Main page\"} textType={TextType.Title}/> \r\n        <BasicButton onPress={()=>{httpHandler.syncApp(); console.log(\"Sync pressed\")}} title={\"Sync\"}/>\r\n        <PixelSpacer width={Dimensions.get(\"screen\").width*.2} height={1}/>\r\n        <View style={{flexDirection:\"row\", justifyContent:\"center\", alignItems:\"stretch\",padding:paddingRadius(), borderRadius:borderRadius(), margin:margin(), backgroundColor:GetColor(Color.SecondaryColor)}}>\r\n            <PixelSpacer height={Dimensions.get(\"screen\").height*.3} width={1}/>\r\n            <View style={{flexDirection:\"column\"}}>\r\n                <PixelSpacer width={Dimensions.get(\"screen\").width*.2} height={1}/>\r\n                <UserDisplay/>\r\n            </View> \r\n        </View>\r\n        <AddEmployee />\r\n        \r\n    </View>)\r\n}","import React from \"react\";\r\nimport { ActivityIndicator, StyleSheet, Text, View } from \"react-native\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\n\r\nexport default function LoadingScreen(props) {\r\n    return(\r\n        <View>\r\n            <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n            <BasicText text={\"Loading...\"}/>\r\n        </View>\r\n    )\r\n}\r\n\r\n const styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#000000\"\r\n\r\n    }\r\n});\r\n ","import { EventMessage, EventType } from \"@azure/msal-browser\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport React, { useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText, { TextType } from \"../SafariSolaceStyleTools/basictext\";\r\nimport LoadingScreen from \"./loadingScreen\";\r\n\r\nexport function LoginScreen(props){\r\n  const {instance} = useMsal()\r\n  instance.enableAccountStorageEvents();\r\n\r\n  instance.addEventCallback((message: EventMessage) => {\r\n    if (message.eventType === EventType.LOGIN_FAILURE) {\r\n      props.setPage(0);\r\n    }\r\n    });\r\n    \r\n  function login(){ \r\n    try{\r\n      instance.loginPopup();\r\n      props.setPage(1);\r\n    } catch(err){\r\n      props.setPage(0);\r\n    }\r\n  }\r\n\r\nreturn(\r\n  <View>\r\n      <BasicText text={\" Sign in \"} textType={TextType.Title}/>\r\n      <BasicButton onPress={() => {login()}} title={\"Login\"}/>\r\n  </View>\r\n)\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { View } from \"react-native\"\r\nimport LoadingScreen from \"./loadingScreen\"\r\nimport { LoginScreen } from \"./loginScreen\"\r\n\r\n\r\nexport default function UnAuthScreen(){\r\n    const [page, setPage] = useState(0);\r\n\r\n    function SwitchAuth(){\r\n          switch(page){\r\n           case 0:{return(<View><LoginScreen setPage={setPage}/></View>)}\r\n           case 1:{return(<View><LoadingScreen setPage={setPage}/></View>)}\r\n           default:{return(<View><LoginScreen setPage={setPage}/></View>)}\r\n         }\r\n         \r\n        }\r\n\r\n    return(\r\n        <View>\r\n            {SwitchAuth()}\r\n        </View>\r\n    )\r\n}","import { Configuration, PublicClientApplication } from '@azure/msal-browser';\r\nimport { AuthenticatedTemplate, MsalProvider, UnauthenticatedTemplate } from '@azure/msal-react';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport { StyleSheet, Text, View, Image, Dimensions } from 'react-native';\r\nimport { appContext, AppContextInterface } from './classes/app-context';\r\n//import EmployeeInfo from './components/employee-info-and-pw-change';\r\nimport HomePage from './components/homepage';\r\nimport LoadingScreen from './components/loadingScreen';\r\nimport { LoginScreen } from './components/loginScreen';\r\nimport UnAuthScreen from './components/unAuthScreen';\r\nimport LocalEmployee, { Employee, Status } from './entities/user';\r\nimport BasicText from './SafariSolaceStyleTools/basictext';\r\nimport PixelSpacer from './SafariSolaceStyleTools/pixel-spacer';\r\nimport GetColor, { Color, Theme } from './SafariSolaceStyleTools/styleconfig';\r\nimport { themeContext, ThemeContextInterface } from './SafariSolaceStyleTools/themecontext';\r\n\r\n\r\n//663099a6-a78e-4905-9aa1-f1a58912c0f6 - Client\r\n//874eb666-ca35-4e5d-bde2-379ff6a5f431 - Tenant\r\n//\"https://salmon-rock-0e75fe60f.1.azurestaticapps.net - website\r\n\r\nconst configuration: Configuration = {\r\n  auth: {\r\n    clientId: \"663099a6-a78e-4905-9aa1-f1a58912c0f6\",\r\n    authority: \"https://login.microsoftonline.com/874eb666-ca35-4e5d-bde2-379ff6a5f431 \",\r\n    redirectUri: \"https://salmon-rock-0e75fe60f.1.azurestaticapps.net/\"\r\n  },\r\n  cache: {\r\n    cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\r\n    storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n  },\r\n}\r\n\r\nconst client = new PublicClientApplication(configuration)\r\n\r\nexport default function App() {\r\n\r\n  // this is for putting on the variables within the context //\r\n\r\n  const [pageIndx, setPageIndex] = useState(0);\r\n\r\n  //dummy variables\r\n  const initUser: Employee = { id: 0, isManager: false, fname: 'fname', lname: 'lname', username: 'username', password: 'password1!' }\r\n  const initEmployeeList: LocalEmployee[] = []\r\n\r\n  const [user, setUser] = useState(initUser);\r\n  const [employeeList, setEmployeeList] = useState(initEmployeeList);\r\n  const [employeeIndex, setEmployeeIndex] = useState(-1);\r\n  const [theme, setTheme] = useState(Theme.default);\r\n  const [sync, setSync] = useState(true);\r\n  //########################################################################## \r\n\r\n  // Initial Context for useState\r\n  //+++++++++++++++++++++++++++++++++++++==++++++++++++++++++++++++++++++++++++\r\n  const initContext: AppContextInterface = {\r\n    pageIndex: pageIndx,\r\n    setPageIndex: setPageIndex,\r\n    user: user,\r\n    setUser: setUser,\r\n    employeeList: employeeList,\r\n    setEmployeeList: setEmployeeList,\r\n    employeeIndex: employeeIndex,\r\n    setEmployeeIndex: setEmployeeIndex,\r\n    theme: theme,\r\n    setTheme: setTheme,\r\n    sync: sync,\r\n    setSync: setSync\r\n  }\r\n\r\n  function switchDisplay() {\r\n    switch (pageIndx) {\r\n      case 0: { return (<View><HomePage /></View>) }\r\n      case 1: { return (<View><BasicText text={\"User setting\"} /></View>) }\r\n      //case 2: { return (<View><EmployeeInfo employee={initUser}/></View>)}\r\n    }\r\n  }\r\n  // This is the context theme for consistent styling\r\n  const themeContextObject: ThemeContextInterface = { theme: theme, setTheme: setTheme }\r\n\r\n\r\n  return (\r\n    <View style={{\r\n      backgroundColor:GetColor(Color.primaryColor),\r\n      flex: 1,\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    }}>\r\n\r\n      <appContext.Provider value={initContext}>\r\n        <themeContext.Provider value={themeContextObject}>\r\n        <Image style={{height:64*3,width:64*3,margin:10}} source={ require('./assets/Sale.png') }/>\r\n          <MsalProvider instance={client}>\r\n            <UnauthenticatedTemplate>\r\n              <UnAuthScreen />\r\n            </UnauthenticatedTemplate>\r\n            <AuthenticatedTemplate>\r\n              {switchDisplay()}\r\n            </AuthenticatedTemplate>\r\n          </MsalProvider>\r\n        </themeContext.Provider>\r\n      </appContext.Provider>\r\n    </View>\r\n  );\r\n}\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/Sale.c1fdc2f5.png\";"],"sourceRoot":""}