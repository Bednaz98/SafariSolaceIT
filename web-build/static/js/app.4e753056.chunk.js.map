{"version":3,"sources":["SafariSolaceStyleTools/colorstyle.ts","SafariSolaceStyleTools/themecontext.tsx","classes/app-context.tsx","entities/user.ts","classes/local-handler.ts","classes/httphandler.ts","SafariSolaceStyleTools/basicbutton.tsx","SafariSolaceStyleTools/basicmodal.tsx","SafariSolaceStyleTools/basictext.tsx","SafariSolaceStyleTools/basicinputtext.tsx","components/add-employee.tsx","components/employee-info-and-pw-change.tsx","components/display-users.tsx","SafariSolaceStyleTools/basicdropdown.tsx","components/themeSelector.tsx","components/settingsScreen.tsx","components/homepage.tsx","components/loadingScreen.tsx","components/loginScreen.tsx","components/unAuthScreen.tsx","App.tsx"],"names":["Theme","Color","PlatformType","themeContext","createContext","theme","setTheme","GetColor","colorType","useContext","Text","Button","Modal","InputText","B","C","D","E","F","Status","initContext","pageIndex","setPageIndex","user","id","isManager","fname","lname","username","password","setUser","employeeList","setEmployeeList","employeeIndex","setEmployeeIndex","default","sync","setSync","appContext","LocalHandler","Context","EmployeeArray","LocalEmployeeArray","map","e","i","temp","serverData","status","unChanged","push","this","Employee","NewLocalEmployee","add","newArray","list","length","delete","passwordChange","type","HttpHandler","dev","useURL","devMode","context","localHander","a","async","axios","get","getURL","response","data","syncEmployees","filter","forEach","console","log","tempEmployee","post","currentEmployee","getServerAllEmployees","serverEmployees","BasicButton","props","onPress","title","View","style","padding","color","disabled","testID","key","BasicModal","child","openTitle","useState","show","setShow","styles","StyleSheet","create","modalView","flexDirection","margin","backgroundColor","borderRadius","alignItems","shadowColor","shadowOffset","width","height","animationType","transparent","visible","onRequestClose","flex","justifyContent","marginTop","TextType","BasicText","text","Error","textType","General","getTextStyle","Title","fontSize","Header","BasicInputText","value","onChangeText","placeholder","undefined","keyboardType","editable","onChange","nativeEvent","eventCount","target","onContentSizeChange","contentSize","TextInput","AddEmployee","setFname","setLname","setUsername","setPassword","setIsManager","contextStates","localHandler","submit","newEmployee","createEmployee","alert","t","Switch","onValueChange","v","EmployeeInfo","employee","pwUpdateState","setpwUpdate","pwState","setpw","localhandler","pwStateClone","trim","includes","match","changePassword","savepwToContext","UserDisplay","maxHeight","ScrollView","localEmployeeArray","getLocalEmployees","createDisplay","BasicDropdown","expanded","setExpanded","TouchableOpacity","children","ThemeSelect","SettingsPage","prop","instance","useMsal","enableAccountStorageEvents","addEventCallback","message","eventType","EventType","LOGOUT_FAILURE","setPage","logout","HomePage","httpHandler","useEffect","updateDisplay","syncApp","LoadingScreen","ActivityIndicator","size","container","LoginScreen","LOGIN_FAILURE","loginPopup","err","login","UnAuthScreen","page","SwitchAuth","client","PublicClientApplication","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","App","pageIndx","themeContextObject","Provider","switchDisplay"],"mappings":"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","file":"static/js/app.4e753056.chunk.js","sourcesContent":["import { useContext } from \"react\";\r\nimport { themeContext } from \"./themecontext\";\r\n\r\n\r\n\r\n\r\nexport enum Theme{\r\n    default,\r\n    other\r\n}\r\n\r\nexport enum Color{\r\n    Text,\r\n    Button,\r\n    Modal,\r\n    InputText,\r\n    B,\r\n    C,\r\n    D,\r\n    E,\r\n    F\r\n}\r\n\r\nexport default function GetColor(colorType:Color){\r\n    const context = useContext(themeContext);\r\n\r\n    switch(context.theme){\r\n        // case Theme.default:{\r\n        //     switch(colorType){\r\n        //         case Color.Text: { return ''}\r\n        //         case Color.Button: { return ''}\r\n        //         case Color.A: { return ''}\r\n        //         case Color.B: { return ''}\r\n        //         case Color.C: { return ''}\r\n        //         case Color.D: { return ''}\r\n        //         case Color.E: { return ''}\r\n        //         case Color.F: { return ''}\r\n        //         default:      { return ''}\r\n        //     }\r\n        // }\r\n        // case Theme.other:{\r\n        //     switch(colorType){\r\n        //         case Color.Text: { return ''}\r\n        //         case Color.Button: { return ''}\r\n        //         case Color.A: { return ''}\r\n        //         case Color.B: { return ''}\r\n        //         case Color.C: { return ''}\r\n        //         case Color.D: { return ''}\r\n        //         case Color.E: { return ''}\r\n        //         case Color.F: { return ''}\r\n        //         default:      { return ''}\r\n        //     }\r\n        // }\r\n        default:{\r\n            switch(colorType){\r\n                case Color.Text: { return ''}\r\n                case Color.Button: { return ''}\r\n                case Color.Modal: { return '#aaaaaa'}\r\n                case Color.InputText: { return '#aaaaaa'}\r\n                case Color.B: { return ''}\r\n                case Color.C: { return ''}\r\n                case Color.D: { return ''}\r\n                case Color.E: { return ''}\r\n                case Color.F: { return ''}\r\n                default:      { return ''}\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport enum PlatformType{\r\n    web,\r\n    ios,\r\n    android\r\n}\r\n\r\nfunction getFormateTheme(){\r\n    const context = useContext(themeContext);\r\n    const platform:PlatformType = PlatformType.web;\r\n\r\n    switch(context.setTheme){\r\n        default:{\r\n            switch(platform){\r\n                case PlatformType.web:{  }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport { Theme } from \"./colorstyle\";\r\n\r\n\r\n\r\n/**this interface is used for intellisense for the 'Theme' useContext*/\r\nexport interface ThemeContextInterface{\r\n    theme:Theme\r\n    setTheme:Function\r\n}\r\n\r\nexport const themeContextObject:ThemeContextInterface = {theme:0,setTheme:()=>{}}\r\n\r\n/**This is the global 'Theme' context*/\r\nexport const themeContext = createContext(themeContextObject)","import { createContext, useContext } from \"react\";\r\nimport LocalEmployee, { Employee } from \"../entities/user\";\r\nimport { Theme } from \"../SafariSolaceStyleTools/colorstyle\";\r\n\r\n\r\nexport interface AppContextInterface{\r\n    pageIndex:number\r\n    setPageIndex:Function\r\n    user:Employee,\r\n    setUser:React.Dispatch<React.SetStateAction<Employee>>,\r\n    employeeList:LocalEmployee[],\r\n    setEmployeeList:React.Dispatch<React.SetStateAction<LocalEmployee[]>>,\r\n    employeeIndex:number, \r\n    setEmployeeIndex:React.Dispatch<React.SetStateAction<number>>,\r\n    theme:Theme, \r\n    setTheme:React.Dispatch<React.SetStateAction<Theme>>,\r\n    sync:boolean, \r\n    setSync:React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\n\r\nexport const initContext:AppContextInterface = {\r\n    pageIndex:0,\r\n    setPageIndex:()=>{},\r\n    user:{\r\n        id: 0,\r\n        isManager: false,\r\n        fname: '',\r\n        lname: '',\r\n        username: '',\r\n        password: '',\r\n    },\r\n    setUser:()=>{},\r\n    employeeList:[], \r\n    setEmployeeList:()=>{},\r\n    employeeIndex:0 , \r\n    setEmployeeIndex:()=>{},\r\n    theme:Theme.default, \r\n    setTheme:()=>{},\r\n    sync:true, \r\n    setSync:()=>{}\r\n}\r\nexport const appContext = createContext(initContext)","export interface Employee{\r\n    id: number\r\n    isManager: boolean\r\n    fname: string\r\n    lname: string\r\n    username: string\r\n    password: string\r\n}\r\n\r\nexport interface WorkLog{\r\n    wId: number\r\n    type: \"CHEKIN\" | \"CHECKOUT\" \r\n    timestamp: number\r\n}\r\n\r\nexport enum Status{\r\n    unChanged,\r\n    add,\r\n    changed,\r\n    delete\r\n}\r\nexport default interface LocalEmployee{\r\n    serverData:Employee\r\n    status:Status\r\n}\r\n\r\n\r\n","\r\nimport { useContext } from \"react\";\r\nimport LocalEmployee, {Employee, Status} from \"../entities/user\";\r\nimport { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport { Theme } from \"../SafariSolaceStyleTools/colorstyle\";\r\nimport { appContext } from \"./app-context\";\r\n\r\n\r\n\r\nexport default class LocalHandler implements localInterface {\r\n    private Context = useContext(appContext);\r\n\r\n    syncEmployees(EmployeeArray: Employee[]) {\r\n        //temp array to hold the changes\r\n        let LocalEmployeeArray:LocalEmployee[]=[];\r\n\r\n        // Map the input array to a new Local User\r\n        EmployeeArray.map((e,i) =>{\r\n            // create the new types\r\n            let temp:LocalEmployee = {serverData: e,status: Status.unChanged};\r\n            // add temp user to the new list\r\n            LocalEmployeeArray.push( temp );\r\n        })\r\n        //set the state\r\n        this.Context.setEmployeeList(LocalEmployeeArray);\r\n        //marked the app as async-ed with the server\r\n        this.Context.setSync(true);\r\n    }\r\n    getLocalEmployees(): LocalEmployee[] {\r\n        //return all users from the state\r\n        return this.Context.employeeList;\r\n    }\r\n    createEmployee(Employee: Employee) {\r\n        //mark the app as not synced with the server\r\n        this.Context.setSync(false);\r\n        // make a temp Local Employee\r\n        const NewLocalEmployee:LocalEmployee = { serverData: Employee,status: Status.add};\r\n        //Using the spread operator to create a new object array and append the new user\r\n        const newArray = this.Context.employeeList;\r\n        newArray.push(NewLocalEmployee);\r\n        this.Context.setEmployeeList(newArray);\r\n    }\r\n    deleteEmployee(Employee: Employee) {\r\n        //mark the app as not synced with the server\r\n        this.Context.setSync(false);\r\n        //get the current list of Local users\r\n        let list = this.Context.employeeList\r\n        //search for this employee\r\n        for(let i =0; i < list.length;i++){\r\n            if(list[i].serverData.id == Employee.id){\r\n                //mark as deleted if found and return\r\n                list[i].status = Status.delete\r\n                // make a new array so the state will update\r\n                this.Context.setEmployeeList([...list ]);\r\n                return;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    changePassword(Employee: Employee, passwordChange: string) {\r\n        //mark the app as not synced with the server\r\n        this.Context.setSync(false);\r\n        //get the current list of Local users\r\n        let list = this.Context.employeeList\r\n        for(let i =0; i < list.length;i++){\r\n            if(list[i].serverData.id == Employee.id){\r\n                //change the password\r\n                list[i].serverData.password= passwordChange\r\n                // make a new array so the state will update\r\n                this.Context.setEmployeeList([...list ]);\r\n                return;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    changeTheme(type: Theme) {\r\n        this.Context.theme = type\r\n    }\r\n\r\n\r\n    \r\n    \r\n}","import axios from \"axios\"\r\nimport { useContext } from \"react\";\r\nimport LocalEmployee, {Employee, Status} from \"../entities/user\";\r\nimport EmployeeInterface, { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport { appContext } from \"./app-context\";\r\nimport LocalHandler from \"./local-handler\";\r\n\r\n\r\n\r\nexport default class HttpHandler implements EmployeeInterface{\r\n    private useURL:string = \"http://20.124.74.192:3000\";\r\n    private devMode:boolean = false;\r\n    /////////////////////////////////////////////\r\n    private context = useContext(appContext);\r\n    private localHander: localInterface = new LocalHandler();\r\n\r\n    constructor(dev:boolean = false){\r\n        this.devMode=dev;\r\n    }\r\n\r\n\r\n    /**this function returns the URL to work with, if devMod is set to false, it will return the production URL, if true, it will return 'http//localhost:[port]'*/\r\n    private getURL(){\r\n        if(this.devMode){ return `https://c27c0348-eb0c-4ac0-afe2-101bc195d6a5.mock.pstmn.io`}\r\n        else {return  this.useURL}\r\n    }\r\n\r\n    async getServerAllEmployees(): Promise<Employee[]> {\r\n        const response = await axios.get(`${this.getURL()}/employees`);\r\n        const data: Employee[] = response.data;\r\n        this.localHander.syncEmployees(data);\r\n        return data;\r\n    }\r\n\r\n    async syncApp() {\r\n        const usersToSave: LocalEmployee[] = this.context.employeeList.filter(e => e.status === Status.add);\r\n        usersToSave.forEach(async e => {\r\n            console.log(e.serverData);\r\n            console.log(\"Making post call for:\", e.serverData)\r\n            const tempEmployee = {\r\n                isManager: e.serverData.isManager,\r\n                fname: e.serverData.fname,\r\n                lname: e.serverData.lname,\r\n                username: e.serverData.username,\r\n                password: e.serverData.password\r\n            };\r\n            const response = await axios.post(`${this.getURL()}/employees`, tempEmployee);\r\n            const currentEmployee: Employee = response.data; \r\n            return(currentEmployee);\r\n        });\r\n        const serverEmployees = await this.getServerAllEmployees();\r\n        this.localHander.syncEmployees(serverEmployees);\r\n        this.context.setSync(true);\r\n    }\r\n}","import React from \"react\";\r\nimport { Button, NativeSyntheticEvent, NativeTouchEvent, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\nexport default function BasicButton(props){\r\n\r\n    const {onPress, title} = props;\r\n\r\n    return(\r\n    <View style={{padding:3 }}>\r\n        <Button onPress={props.onPress} title={ props.title} color={GetColor(Color.Button)} // << main propers here\r\n        //Extra attributes added\r\n\r\n        disabled = { props.disabled} key={ props.key} testID={props.testID}\r\n        /*this is the close of the button tag*//> \r\n    </View>)\r\n}","import React, { useState } from \"react\";\r\nimport { Modal, View,StyleSheet, Button } from \"react-native\";\r\nimport BasicButton from \"./basicbutton\";\r\nimport BasicText from \"./basictext\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\n\r\nexport default function BasicModal(props){\r\n  let child = props.child\r\n  const openTitle = props?.openTitle ?? \"null open title\"\r\n  \r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const styles = StyleSheet.create({\r\n    modalView: {\r\n      flexDirection:\"column\",\r\n      margin: 20,\r\n      backgroundColor:GetColor(Color.Modal),\r\n      borderRadius: 20,\r\n      padding: 35,\r\n      alignItems: \"center\",\r\n      shadowColor: \"#000\",\r\n      shadowOffset: {\r\n        width: 0,\r\n        height: 0\r\n      }\r\n  }\r\n});\r\n\r\n    return(\r\n      <View>\r\n        <Modal\r\n          animationType=\"slide\"\r\n          transparent={true}\r\n          visible={show}\r\n          onRequestClose={() => {setShow(!show)}}>\r\n          <View style={ {flex: 1, justifyContent: \"center\", alignItems: \"center\", marginTop: 22, backgroundColor:GetColor(Color.Modal)} }>\r\n            <View style={styles.modalView}>\r\n\r\n              <View>\r\n                {child}\r\n              </View>\r\n              <View>\r\n                <BasicButton title={\"close\"} onPress={()=>{setShow(!show)}}/>\r\n              </View>\r\n\r\n            </View>\r\n          </View>\r\n        </Modal>\r\n\r\n        <BasicButton title={openTitle} onPress={()=>{setShow(true)}}/>\r\n\r\n      </View>)\r\n      \r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { View,Text } from 'react-native'\r\nimport GetColor, { Color } from './colorstyle'\r\n\r\n\r\n\r\n\r\n/** the only required prop, @attribute 'text', optionally @Attribute'textType' of type 'TextType' can be included for specifying extra styling options*/\r\nexport default function BasicText(props){\r\n    const {text} = props\r\n    if(!text){throw new Error('You did not pass a text value into one of your text')}\r\n    //This will grab from the props the type of text for styling\r\n    // is not found, it will default to general text\r\n    const textType:TextType = props?.type ?? TextType.General\r\n    return (\r\n    <View style={{padding:3}}>\r\n        <Text style={getTextStyle(textType)}>{text}</Text>\r\n    </View>)\r\n}\r\n\r\n/**The type */\r\nexport enum TextType{\r\n    Title,\r\n    Header,\r\n    General\r\n}\r\nfunction getTextStyle(textType:TextType){\r\n    switch(textType){\r\n    case TextType.Title  :  {return {color:GetColor(Color.Text), fontSize:70}}\r\n    case TextType.Header :  {return {color:GetColor(Color.Text), fontSize:50}}\r\n    // The default case should be exactly the same as the general text as an edge case\r\n    case TextType.General:  {return {color:GetColor(Color.Text), fontSize:20}}\r\n    default              :  {return {color:GetColor(Color.Text), fontSize:20}}\r\n    //=================================================================================\r\n    }\r\n}","import React from \"react\";\r\nimport { TextInput, View } from \"react-native\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n\r\nexport default function BasicInputText(props){\r\n    const {value, onChangeText, placeholder} = props;\r\n    if(value === undefined){throw new Error('You did not pass a value into one of your input text, pass the useState read only value here')}\r\n    if(!onChangeText){throw new Error('You did not pass an onChangeText to one of your input text, pass the useState function here ')}\r\n    if(!placeholder){throw new Error('You did not put a placeholder into one of your input text, please add a default value that describes what the field will be used for')}\r\n    const keyboardType = props?.keyboardType ?? 'default';\r\n    const editable = props?.editable ?? true;\r\n    const onChange = props?.onChange ?? ( ({ nativeEvent: { eventCount, target, text} }) => {} ) ;\r\n    const onContentSizeChange = props?.onContentSizeChange ?? ( ({ nativeEvent: { contentSize: { width, height } } }) => {} );\r\n\r\n    return(\r\n    <View style={{backgroundColor:GetColor(Color.InputText), padding:3}}> \r\n        <TextInput value={value} onChangeText={onChangeText} placeholder={placeholder} \r\n        keyboardType='default' editable={editable} onChange={onChange} onContentSizeChange={onContentSizeChange}/>\r\n    </View>)\r\n}\r\n","import { useContext, useState } from \"react\";\r\nimport {Switch} from \"react-native\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\nimport BasicModal from \"../SafariSolaceStyleTools/basicmodal\"\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport { Employee } from \"../entities/user\";\r\nimport { appContext } from \"../classes/app-context\";\r\n\r\n\r\nexport default function AddEmployee(){\r\n\r\n    const [fname, setFname] = useState(\"\");\r\n    const [lname, setLname] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isManager, setIsManager] = useState(false);\r\n\r\n    const contextStates = useContext(appContext);\r\n    const localHandler = new LocalHandler();\r\n\r\n    function submit(){\r\n        if(!fname || !lname || !username || !password){\r\n            alert(\"All fields must be filled out...\")\r\n        } else {\r\n            const newEmployee: Employee = {id: contextStates.employeeList.length, fname: fname, lname: lname, isManager: isManager, username: username, password: password};\r\n            localHandler.createEmployee(newEmployee);\r\n            alert(\"User added\");\r\n            setFname(\"\");\r\n            setLname(\"\");\r\n            setUsername(\"\");\r\n            setPassword(\"\");\r\n            console.log(contextStates.employeeList);\r\n        }\r\n    }\r\n\r\n    function addDisplay(){\r\n        return(<>\r\n        <BasicText text=\"First Name\"/>\r\n        <BasicInputText value={fname} onChangeText={t => setFname(t)} placeholder=\"John\"/>\r\n        <BasicText text=\"Last Name\"/>\r\n        <BasicInputText value={lname} onChangeText={t => setLname(t)} placeholder=\"Smith\"/>\r\n        <BasicText text=\"Username\"/>\r\n        <BasicInputText value={username} onChangeText={t => setUsername(t)} placeholder=\"jsmith\"/>\r\n        <BasicText text=\"Password\"/>\r\n        <BasicInputText value={password} onChangeText={t => setPassword(t)} placeholder=\"********\"/>\r\n        <BasicText text=\"Is person manager?\"/>\r\n        <Switch onValueChange={() => setIsManager(v => !v)} value={isManager}/>\r\n        <BasicButton onPress={submit} title=\"Submit\"/>\r\n        </>)\r\n    }\r\n\r\n    return(\r\n    <BasicModal openTitle=\"Add Employee\" child={addDisplay()}/>)\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { View} from \"react-native\";\r\nimport { appContext } from \"../classes/app-context\";\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport { Employee } from \"../entities/user\";\r\nimport { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicInputText from \"../SafariSolaceStyleTools/basicinputtext\";\r\nimport BasicModal from \"../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\n\r\n/** Displays the employee info and contains password change functionality\r\n *  @param employee the employee that the admin wishes to view\r\n*/\r\nexport default function EmployeeInfo(props: { employee: Employee }) {\r\n\r\n    //prop alias\r\n    const employee = props.employee\r\n\r\n    //global states\r\n    const contextStates = useContext(appContext);\r\n    \r\n    //local states\r\n    const [pwUpdateState, setpwUpdate] = useState<boolean>(false); //display new password creation\r\n    const [pwState, setpw] = useState<string>(\"\"); //textinput reference\r\n    \r\n    //local handler\r\n    const localhandler: localInterface = new LocalHandler()\r\n    \r\n    /** check that the new password is valid and if it is, update the local handler  */\r\n    function savepwToContext() {       \r\n        \r\n        //clean up the input\r\n        const pwStateClone = pwState.trim()       \r\n        \r\n        //if password already exists\r\n        if (contextStates.employeeList.map((employee)=> employee.serverData.password).includes(pwStateClone) === true){\r\n            alert(\"That password already exists, try another\")\r\n        }        \r\n        \r\n        //if password characters are valid\r\n        else if (pwStateClone.length > 7 && pwStateClone.match(/[!-/:-@[-`{-~]/) !== null){           \r\n            \r\n            //update employee prop\r\n            employee.password = pwStateClone;\r\n            \r\n            //update handler and close pw updater\r\n            localhandler.changePassword(employee, pwStateClone)\r\n            setpwUpdate(false)\r\n        }\r\n        else alert(\"You must enter a valid password between 7 and 1023783467234 characters, and include at least one symbol\")\r\n    }\r\n\r\n    //render page\r\n    function renderPage(){\r\n        return (<>\r\n            <BasicText text={`Name: ${employee.fname} ${employee.lname}`}/>\r\n            <BasicText text={ `Username: ${ employee.username }` }/>\r\n            <BasicText text={ `ID: ${ employee.id }`}/>\r\n            <BasicText text={ `Manager: ${ employee.isManager ? 'Yes':'No' }`}/>\r\n\r\n            {pwUpdateState ? (\r\n                <View>\r\n                    <BasicInputText\r\n                        value={pwState}\r\n                        onChangeText={setpw}\r\n                        placeholder=\"new password\"\r\n                    ></BasicInputText>\r\n                    <BasicButton title=\"save\" onPress={() => savepwToContext()}/>\r\n                </View>\r\n            ) : <BasicButton title=\"Create New Password\" onPress={() => setpwUpdate(true)}/>}             \r\n        </>)\r\n    }\r\n\r\n    //get name\r\n    function getName(){\r\n        return `${employee.fname} ${employee.lname}`\r\n    } \r\n    \r\n    //component main return\r\n    return(\r\n        <BasicModal child = {renderPage()} openTitle = {getName()} ></BasicModal>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { ScrollView, View } from \"react-native\";\r\nimport { v4 } from \"uuid\";\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport LocalEmployee, { Employee } from \"../entities/user\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\nimport EmployeeInfo from \"./employee-info-and-pw-change\";\r\n\r\n\r\n\r\n\r\nexport default function UserDisplay(){\r\n    //getting the local handler to display the users\r\n    const localHandler:LocalHandler = new LocalHandler()\r\n\r\n    function Testing(){ console.log(\"press\")}\r\n\r\n\r\n    function createDisplay():JSX.Element[]{\r\n        //Gets an array of local users\r\n        let localEmployeeArray: LocalEmployee[] = localHandler.getLocalEmployees()\r\n\r\n        // returns a default array if no users are found\r\n        if( !(localEmployeeArray.length >1)) {return [<BasicText text={\"No Employees found\"}/>]}\r\n        // maps each user to a component and returns the array\r\n        return localEmployeeArray.map((e,i)=>{return <EmployeeInfo key={e.serverData.id} employee={e.serverData}/>})\r\n    }\r\n\r\n\r\n    return(\r\n        <View style={{maxHeight:300}}>\r\n            <ScrollView>\r\n                {createDisplay()}\r\n            </ScrollView>\r\n        </View>)\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { TouchableOpacity, View } from \"react-native\";\r\nimport BasicText from \"./basictext\";\r\nimport GetColor, { Color } from \"./colorstyle\";\r\n\r\n//creates a dropdown list\r\n\r\nexport default function BasicDropdown(props) {\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  return (\r\n    <View>\r\n      <TouchableOpacity onPress={() => setExpanded(!expanded)}>\r\n        <View style={{ flexDirection: \"column\" }}>\r\n          <View>\r\n            <BasicText text={props.title} />\r\n          </View>\r\n          <TouchableOpacity><View>{expanded && props.children}</View></TouchableOpacity>\r\n        </View>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n","import BasicDropdown from \"../SafariSolaceStyleTools/basicdropdown\";\r\n\r\n\r\nexport function ThemeSelect(props){\r\n    return(\r\n        <BasicDropdown title={\"hello\"}/>\r\n    )\r\n}","import React from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { Alert, View } from \"react-native\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\nimport { EventMessage, EventType } from \"@azure/msal-browser\";\r\nimport { ThemeSelect } from \"./themeSelector\";\r\n\r\nexport default function SettingsPage(prop) {\r\n\r\n  const {instance} = useMsal();\r\n  instance.enableAccountStorageEvents();\r\n\r\n  instance.addEventCallback((message: EventMessage) => {\r\n    if (message.eventType === EventType.LOGOUT_FAILURE) {\r\n      prop.setPage(0);\r\n    } \r\n    });\r\n\r\n  function logout() {\r\n    instance.logout();\r\n    prop.setPage(0);\r\n  } \r\n\r\n    return (\r\n        <View>\r\n            <BasicText text={\"Settings\"} />\r\n            <BasicButton onPress={() => {logout()}} title={\"Logout\"} />\r\n            <ThemeSelect/>\r\n        </View>\r\n    )\r\n}","import React, { useContext, useEffect } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { appContext } from \"../classes/app-context\";\r\nimport HttpHandler from \"../classes/httphandler\";\r\nimport LocalHandler from \"../classes/local-handler\";\r\nimport HttpInterface, { localInterface } from \"../intrerfaces/employee-api-interface\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicModal from \"../SafariSolaceStyleTools/basicmodal\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\nimport AddEmployee from \"./add-employee\";\r\nimport UserDisplay from \"./display-users\";\r\nimport SettingsPage from \"./settingsScreen\";\r\n\r\nexport default function HomePage(){\r\n\r\n    const httpHandler: HttpInterface = new HttpHandler(false);\r\n    const localHandler: localInterface = new LocalHandler();\r\n    const context = useContext(appContext)\r\n\r\n    useEffect(()=>{\r\n        updateDisplay();\r\n    },[])\r\n\r\n    async function updateDisplay(){\r\n        const response = await httpHandler.getServerAllEmployees();\r\n        localHandler.syncEmployees(response)\r\n    }\r\n\r\n    return(<View>\r\n        <BasicModal openTitle={\"settings\"} child={<View><SettingsPage/></View>}/>\r\n        <BasicText text={\"Main page\"}/> \r\n        <BasicButton onPress={()=>{httpHandler.syncApp(); console.log(\"Sync pressed\")}} title={\"Sync\"}/>\r\n        <UserDisplay/> \r\n        <AddEmployee />\r\n        \r\n    </View>)\r\n}","import React from \"react\";\r\nimport { ActivityIndicator, StyleSheet, Text, View } from \"react-native\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\n\r\nexport default function LoadingScreen(props) {\r\n    return(\r\n        <View>\r\n            <ActivityIndicator size=\"large\" color=\"#0000ff\" />\r\n            <BasicText text={\"Loading...\"}/>\r\n        </View>\r\n    )\r\n}\r\n\r\n const styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"#000000\"\r\n\r\n    }\r\n});\r\n ","import { EventMessage, EventType } from \"@azure/msal-browser\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport React, { useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport BasicButton from \"../SafariSolaceStyleTools/basicbutton\";\r\nimport BasicText from \"../SafariSolaceStyleTools/basictext\";\r\nimport LoadingScreen from \"./loadingScreen\";\r\n\r\nexport function LoginScreen(props){\r\n  const {instance} = useMsal()\r\n  instance.enableAccountStorageEvents();\r\n\r\n  instance.addEventCallback((message: EventMessage) => {\r\n    if (message.eventType === EventType.LOGIN_FAILURE) {\r\n      props.setPage(0);\r\n    }\r\n    });\r\n    \r\n  function login(){ \r\n    try{\r\n      instance.loginPopup();\r\n      props.setPage(1);\r\n    } catch(err){\r\n      props.setPage(0);\r\n    }\r\n  }\r\n\r\nreturn(\r\n  <View>\r\n      <BasicText text={\" Sign in \"} />\r\n      <BasicButton onPress={() => {login()}} title={\"Login\"}/>\r\n  </View>\r\n)\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { View } from \"react-native\"\r\nimport LoadingScreen from \"./loadingScreen\"\r\nimport { LoginScreen } from \"./loginScreen\"\r\n\r\n\r\nexport default function UnAuthScreen(){\r\n    const [page, setPage] = useState(0);\r\n\r\n    function SwitchAuth(){\r\n          switch(page){\r\n           case 0:{return(<View><LoginScreen setPage={setPage}/></View>)}\r\n           case 1:{return(<View><LoadingScreen setPage={setPage}/></View>)}\r\n           default:{return(<View><LoginScreen setPage={setPage}/></View>)}\r\n         }\r\n         \r\n        }\r\n\r\n    return(\r\n        <View>\r\n            {SwitchAuth()}\r\n        </View>\r\n    )\r\n}","import { Configuration, PublicClientApplication } from '@azure/msal-browser';\r\nimport { AuthenticatedTemplate, MsalProvider, UnauthenticatedTemplate } from '@azure/msal-react';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport { appContext, AppContextInterface } from './classes/app-context';\r\n//import EmployeeInfo from './components/employee-info-and-pw-change';\r\nimport HomePage from './components/homepage';\r\nimport LoadingScreen from './components/loadingScreen';\r\nimport { LoginScreen } from './components/loginScreen';\r\nimport UnAuthScreen from './components/unAuthScreen';\r\nimport LocalEmployee, {Employee, Status} from './entities/user';\r\nimport BasicText from './SafariSolaceStyleTools/basictext';\r\nimport { Theme } from './SafariSolaceStyleTools/colorstyle';\r\nimport { themeContext, ThemeContextInterface } from './SafariSolaceStyleTools/themecontext';\r\n\r\nconst configuration:Configuration = {\r\n  auth: {\r\n    clientId: \"663099a6-a78e-4905-9aa1-f1a58912c0f6\",\r\n    authority: \"https://login.microsoftonline.com/874eb666-ca35-4e5d-bde2-379ff6a5f431\",\r\n    redirectUri: \"http://localhost:19006/\"\r\n  },\r\n  cache: {\r\n    cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\r\n    storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n  },\r\n}\r\n\r\nconst client = new PublicClientApplication(configuration)\r\n\r\nexport default function App() {\r\n\r\n  // this is for putting on the variables within the context //\r\n\r\n  const [pageIndx, setPageIndex] = useState(0);\r\n  \r\n  //dummy variables\r\n  const initUser:Employee = {id: 0,isManager: false,fname: 'fname',lname: 'lname',username: 'username',password: 'password1!'}\r\n  const initEmployeeList:LocalEmployee[]= []\r\n\r\n  const [user, setUser] = useState(initUser);\r\n  const [employeeList, setEmployeeList] = useState(initEmployeeList);\r\n  const [employeeIndex, setEmployeeIndex] = useState(-1);\r\n  const [theme, setTheme] = useState(Theme.default);\r\n  const [sync, setSync] = useState(true);\r\n  //########################################################################## \r\n  \r\n  // Initial Context for useState\r\n  //+++++++++++++++++++++++++++++++++++++==++++++++++++++++++++++++++++++++++++\r\n  const initContext:AppContextInterface = {\r\n    pageIndex: pageIndx,\r\n    setPageIndex: setPageIndex,\r\n    user: user,\r\n    setUser: setUser,\r\n    employeeList: employeeList,\r\n    setEmployeeList: setEmployeeList,\r\n    employeeIndex: employeeIndex,\r\n    setEmployeeIndex:setEmployeeIndex,\r\n    theme: theme,\r\n    setTheme: setTheme,\r\n    sync: sync,\r\n    setSync: setSync\r\n  }\r\n  \r\n  function switchDisplay(){\r\n    switch(pageIndx){\r\n      case 0: {return (<View><HomePage/></View>)}\r\n      case 1: { return (<View><BasicText text={\"User setting\"}/></View>)}\r\n      //case 2: { return (<View><EmployeeInfo employee={initUser}/></View>)}\r\n    }\r\n  }\r\n  // This is the context theme for consistent styling\r\n  const themeContextObject:ThemeContextInterface = {theme:theme,setTheme:setTheme}\r\n  \r\n  \r\n  return (\r\n    <View style={styles.container}>\r\n\r\n      <appContext.Provider value = {initContext}>\r\n          <themeContext.Provider value = { themeContextObject }>\r\n          <MsalProvider instance={client}>\r\n\r\n      <UnauthenticatedTemplate>\r\n        <UnAuthScreen/>\r\n      </UnauthenticatedTemplate>\r\n\r\n      <AuthenticatedTemplate>\r\n        {switchDisplay()}\r\n      </AuthenticatedTemplate>\r\n\r\n    </MsalProvider>\r\n            \r\n        </themeContext.Provider>\r\n      </appContext.Provider>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#999',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n});"],"sourceRoot":""}